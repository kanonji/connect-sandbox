// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: baz/v1/baz.proto

package bazv1connect

import (
	v1 "connect-sandbox/api/gen/baz/v1"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// BazServiceName is the fully-qualified name of the BazService service.
	BazServiceName = "baz.v1.BazService"
)

// BazServiceClient is a client for the baz.v1.BazService service.
type BazServiceClient interface {
	Do(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.DoResponse], error)
}

// NewBazServiceClient constructs a client for the baz.v1.BazService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBazServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) BazServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &bazServiceClient{
		do: connect_go.NewClient[emptypb.Empty, v1.DoResponse](
			httpClient,
			baseURL+"/baz.v1.BazService/Do",
			opts...,
		),
	}
}

// bazServiceClient implements BazServiceClient.
type bazServiceClient struct {
	do *connect_go.Client[emptypb.Empty, v1.DoResponse]
}

// Do calls baz.v1.BazService.Do.
func (c *bazServiceClient) Do(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.DoResponse], error) {
	return c.do.CallUnary(ctx, req)
}

// BazServiceHandler is an implementation of the baz.v1.BazService service.
type BazServiceHandler interface {
	Do(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.DoResponse], error)
}

// NewBazServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBazServiceHandler(svc BazServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/baz.v1.BazService/Do", connect_go.NewUnaryHandler(
		"/baz.v1.BazService/Do",
		svc.Do,
		opts...,
	))
	return "/baz.v1.BazService/", mux
}

// UnimplementedBazServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBazServiceHandler struct{}

func (UnimplementedBazServiceHandler) Do(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[v1.DoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("baz.v1.BazService.Do is not implemented"))
}
