// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: google/longrunning/operations.proto

package longrunningconnect

import (
	longrunning "connect-sandbox/api/gen/google/longrunning"
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OperationsName is the fully-qualified name of the Operations service.
	OperationsName = "google.longrunning.Operations"
)

// OperationsClient is a client for the google.longrunning.Operations service.
type OperationsClient interface {
	// Lists operations that match the specified filter in the request. If the
	// server doesn't support this method, it returns `UNIMPLEMENTED`.
	//
	// NOTE: the `name` binding allows API services to override the binding
	// to use different resource name schemes, such as `users/*/operations`. To
	// override the binding, API services can add a binding such as
	// `"/v1/{name=users/*}/operations"` to their service configuration.
	// For backwards compatibility, the default name includes the operations
	// collection id, however overriding users must ensure the name binding
	// is the parent resource, without the operations collection id.
	ListOperations(context.Context, *connect_go.Request[longrunning.ListOperationsRequest]) (*connect_go.Response[longrunning.ListOperationsResponse], error)
	// Gets the latest state of a long-running operation.  Clients can use this
	// method to poll the operation result at intervals as recommended by the API
	// service.
	GetOperation(context.Context, *connect_go.Request[longrunning.GetOperationRequest]) (*connect_go.Response[longrunning.Operation], error)
	// Deletes a long-running operation. This method indicates that the client is
	// no longer interested in the operation result. It does not cancel the
	// operation. If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	DeleteOperation(context.Context, *connect_go.Request[longrunning.DeleteOperationRequest]) (*connect_go.Response[emptypb.Empty], error)
	// Starts asynchronous cancellation on a long-running operation.  The server
	// makes a best effort to cancel the operation, but success is not
	// guaranteed.  If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
	// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
	// other methods to check whether the cancellation succeeded or whether the
	// operation completed despite cancellation. On successful cancellation,
	// the operation is not deleted; instead, it becomes an operation with
	// an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
	// corresponding to `Code.CANCELLED`.
	CancelOperation(context.Context, *connect_go.Request[longrunning.CancelOperationRequest]) (*connect_go.Response[emptypb.Empty], error)
	// Waits until the specified long-running operation is done or reaches at most
	// a specified timeout, returning the latest state.  If the operation is
	// already done, the latest state is immediately returned.  If the timeout
	// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
	// timeout is used.  If the server does not support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	// Note that this method is on a best-effort basis.  It may return the latest
	// state before the specified timeout (including immediately), meaning even an
	// immediate response is no guarantee that the operation is done.
	WaitOperation(context.Context, *connect_go.Request[longrunning.WaitOperationRequest]) (*connect_go.Response[longrunning.Operation], error)
}

// NewOperationsClient constructs a client for the google.longrunning.Operations service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOperationsClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OperationsClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &operationsClient{
		listOperations: connect_go.NewClient[longrunning.ListOperationsRequest, longrunning.ListOperationsResponse](
			httpClient,
			baseURL+"/google.longrunning.Operations/ListOperations",
			opts...,
		),
		getOperation: connect_go.NewClient[longrunning.GetOperationRequest, longrunning.Operation](
			httpClient,
			baseURL+"/google.longrunning.Operations/GetOperation",
			opts...,
		),
		deleteOperation: connect_go.NewClient[longrunning.DeleteOperationRequest, emptypb.Empty](
			httpClient,
			baseURL+"/google.longrunning.Operations/DeleteOperation",
			opts...,
		),
		cancelOperation: connect_go.NewClient[longrunning.CancelOperationRequest, emptypb.Empty](
			httpClient,
			baseURL+"/google.longrunning.Operations/CancelOperation",
			opts...,
		),
		waitOperation: connect_go.NewClient[longrunning.WaitOperationRequest, longrunning.Operation](
			httpClient,
			baseURL+"/google.longrunning.Operations/WaitOperation",
			opts...,
		),
	}
}

// operationsClient implements OperationsClient.
type operationsClient struct {
	listOperations  *connect_go.Client[longrunning.ListOperationsRequest, longrunning.ListOperationsResponse]
	getOperation    *connect_go.Client[longrunning.GetOperationRequest, longrunning.Operation]
	deleteOperation *connect_go.Client[longrunning.DeleteOperationRequest, emptypb.Empty]
	cancelOperation *connect_go.Client[longrunning.CancelOperationRequest, emptypb.Empty]
	waitOperation   *connect_go.Client[longrunning.WaitOperationRequest, longrunning.Operation]
}

// ListOperations calls google.longrunning.Operations.ListOperations.
func (c *operationsClient) ListOperations(ctx context.Context, req *connect_go.Request[longrunning.ListOperationsRequest]) (*connect_go.Response[longrunning.ListOperationsResponse], error) {
	return c.listOperations.CallUnary(ctx, req)
}

// GetOperation calls google.longrunning.Operations.GetOperation.
func (c *operationsClient) GetOperation(ctx context.Context, req *connect_go.Request[longrunning.GetOperationRequest]) (*connect_go.Response[longrunning.Operation], error) {
	return c.getOperation.CallUnary(ctx, req)
}

// DeleteOperation calls google.longrunning.Operations.DeleteOperation.
func (c *operationsClient) DeleteOperation(ctx context.Context, req *connect_go.Request[longrunning.DeleteOperationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteOperation.CallUnary(ctx, req)
}

// CancelOperation calls google.longrunning.Operations.CancelOperation.
func (c *operationsClient) CancelOperation(ctx context.Context, req *connect_go.Request[longrunning.CancelOperationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.cancelOperation.CallUnary(ctx, req)
}

// WaitOperation calls google.longrunning.Operations.WaitOperation.
func (c *operationsClient) WaitOperation(ctx context.Context, req *connect_go.Request[longrunning.WaitOperationRequest]) (*connect_go.Response[longrunning.Operation], error) {
	return c.waitOperation.CallUnary(ctx, req)
}

// OperationsHandler is an implementation of the google.longrunning.Operations service.
type OperationsHandler interface {
	// Lists operations that match the specified filter in the request. If the
	// server doesn't support this method, it returns `UNIMPLEMENTED`.
	//
	// NOTE: the `name` binding allows API services to override the binding
	// to use different resource name schemes, such as `users/*/operations`. To
	// override the binding, API services can add a binding such as
	// `"/v1/{name=users/*}/operations"` to their service configuration.
	// For backwards compatibility, the default name includes the operations
	// collection id, however overriding users must ensure the name binding
	// is the parent resource, without the operations collection id.
	ListOperations(context.Context, *connect_go.Request[longrunning.ListOperationsRequest]) (*connect_go.Response[longrunning.ListOperationsResponse], error)
	// Gets the latest state of a long-running operation.  Clients can use this
	// method to poll the operation result at intervals as recommended by the API
	// service.
	GetOperation(context.Context, *connect_go.Request[longrunning.GetOperationRequest]) (*connect_go.Response[longrunning.Operation], error)
	// Deletes a long-running operation. This method indicates that the client is
	// no longer interested in the operation result. It does not cancel the
	// operation. If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	DeleteOperation(context.Context, *connect_go.Request[longrunning.DeleteOperationRequest]) (*connect_go.Response[emptypb.Empty], error)
	// Starts asynchronous cancellation on a long-running operation.  The server
	// makes a best effort to cancel the operation, but success is not
	// guaranteed.  If the server doesn't support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
	// [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
	// other methods to check whether the cancellation succeeded or whether the
	// operation completed despite cancellation. On successful cancellation,
	// the operation is not deleted; instead, it becomes an operation with
	// an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
	// corresponding to `Code.CANCELLED`.
	CancelOperation(context.Context, *connect_go.Request[longrunning.CancelOperationRequest]) (*connect_go.Response[emptypb.Empty], error)
	// Waits until the specified long-running operation is done or reaches at most
	// a specified timeout, returning the latest state.  If the operation is
	// already done, the latest state is immediately returned.  If the timeout
	// specified is greater than the default HTTP/RPC timeout, the HTTP/RPC
	// timeout is used.  If the server does not support this method, it returns
	// `google.rpc.Code.UNIMPLEMENTED`.
	// Note that this method is on a best-effort basis.  It may return the latest
	// state before the specified timeout (including immediately), meaning even an
	// immediate response is no guarantee that the operation is done.
	WaitOperation(context.Context, *connect_go.Request[longrunning.WaitOperationRequest]) (*connect_go.Response[longrunning.Operation], error)
}

// NewOperationsHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOperationsHandler(svc OperationsHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/google.longrunning.Operations/ListOperations", connect_go.NewUnaryHandler(
		"/google.longrunning.Operations/ListOperations",
		svc.ListOperations,
		opts...,
	))
	mux.Handle("/google.longrunning.Operations/GetOperation", connect_go.NewUnaryHandler(
		"/google.longrunning.Operations/GetOperation",
		svc.GetOperation,
		opts...,
	))
	mux.Handle("/google.longrunning.Operations/DeleteOperation", connect_go.NewUnaryHandler(
		"/google.longrunning.Operations/DeleteOperation",
		svc.DeleteOperation,
		opts...,
	))
	mux.Handle("/google.longrunning.Operations/CancelOperation", connect_go.NewUnaryHandler(
		"/google.longrunning.Operations/CancelOperation",
		svc.CancelOperation,
		opts...,
	))
	mux.Handle("/google.longrunning.Operations/WaitOperation", connect_go.NewUnaryHandler(
		"/google.longrunning.Operations/WaitOperation",
		svc.WaitOperation,
		opts...,
	))
	return "/google.longrunning.Operations/", mux
}

// UnimplementedOperationsHandler returns CodeUnimplemented from all methods.
type UnimplementedOperationsHandler struct{}

func (UnimplementedOperationsHandler) ListOperations(context.Context, *connect_go.Request[longrunning.ListOperationsRequest]) (*connect_go.Response[longrunning.ListOperationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("google.longrunning.Operations.ListOperations is not implemented"))
}

func (UnimplementedOperationsHandler) GetOperation(context.Context, *connect_go.Request[longrunning.GetOperationRequest]) (*connect_go.Response[longrunning.Operation], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("google.longrunning.Operations.GetOperation is not implemented"))
}

func (UnimplementedOperationsHandler) DeleteOperation(context.Context, *connect_go.Request[longrunning.DeleteOperationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("google.longrunning.Operations.DeleteOperation is not implemented"))
}

func (UnimplementedOperationsHandler) CancelOperation(context.Context, *connect_go.Request[longrunning.CancelOperationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("google.longrunning.Operations.CancelOperation is not implemented"))
}

func (UnimplementedOperationsHandler) WaitOperation(context.Context, *connect_go.Request[longrunning.WaitOperationRequest]) (*connect_go.Response[longrunning.Operation], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("google.longrunning.Operations.WaitOperation is not implemented"))
}
